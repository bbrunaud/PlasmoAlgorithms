GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


       
      Bilinear refinery model based on the example in
      Yang et al., AIChE J., 2016
      This model contains uncertain Sulphur and VR yields.
      Number of binary complicating variables: 
      Number of continuous complicating variables: 0
      Number of binary recourse variables: 0
      Number of continuous recourse variables: *s
      Number of bilinear terms: *s
      Number of complicating constraints: 
      Number of recourse constraints: 
       
  15   
  16  *--------------------------------
  17  *               SET DEFINITIONS
  18  *--------------------------------
  19   
  20  SETS
  21          c               "crudes"                                                                / 1*10 /
  22          w               "components"                                                    / 1*8 /
  23          Re_in   "reformer input"                                                / 1*2 /
  24          Re_out  "reformer output"                                               / 1*6 /
  25          Cr_in   "cracker input"                                                 / 1*2 /
  26          Cr_out  "cracker output"                                                / 1*6 /
  27          Cr_CGO  "cracker-CGO output"                                    / 1*3 /
  28          Cr_mode "cracker modes"                                                 / 1*2 /
  29          Iso_out "isomerisation output"                                  / 1*4 /
  30          Des_out "desulphurisation output"                               / 1*4 /
  31          PG98_in "PG98 input"                                                    / 1*6 /
  32          Burn    "burn streams"                                                  / 1*3 /
  33          JPF_in  "JPF input"                                                             / 1*3 /
  34          JPF_out "JPF output"                                                    / 1*2 /
  35          AGO_in  "AGO input"                                                             / 1*3 /
  36          p               "products"                                                              / 1*7 /
  37          LG_in   "LG input"                                                              / 1*5 /
  38          LG_out  "LG output"                                                             / 1*4 /
  39          LG_prop "LG properties"                                                 / 1*3 /
  40          h               "scenarios"                                                             / 1*5 /
  41  ;
  42   
  43  alias(w,w2);
  44   
  45  *-------------------------------------------
  46  *                       SET SOLUTION OPTIONS
  47  *-------------------------------------------
  48   
  49  OPTION LIMROW = 0;
  50  OPTION LIMCOL = 0;
  51  OPTION OPTCA  = 1E-09;
  52  OPTION OPTCR  = 1E-03;
  53  OPTION RESLIM = 1E+04;
  54  OPTION ITERLIM = 1E+09;
  55   
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


  56  OPTION LP=CPLEX;
  57  OPTION NLP=SNOPT;
  58  OPTION MIP=CPLEX;
  59  *OPTION MINLP=antigone;
  60  OPTION MINLP=BARON;
  61   
  62  *---------------------------------------------
  63  *               DEFINE PROBLEM-SPECIFIC PARAMETERS
  64  *---------------------------------------------
  65   
  66  SCALARS
  67          Desulphurisation_capacity  / 0.125 /,
  68          CDU_capacity  / 0.700 /,
  69          Reformer95_lower  / 5 /,
  70          Reformer_capacity  / 0.065 /,
  71          Cracker_capacity  / 0.175 /,
  72          GranularityOfBarrels  / 5000 /,
  73          LG_sale  / 561.6 /,
  74          LN_sale  / 1003 /,
  75          HF_sale  / 637 /,
  76          ES95_sale  / 1194 /,
  77          PG98_sale  / 1231 /,
  78          JET_sale  / 923 /,
  79          AGO_sale  / 907 /,
  80          CGO_density  / 0.95 /,
  81          Mogas_viscosity  / 12.2 /,
  82          AGO_viscosity  / 11.65 /,
  83          Mogas_Sulphur  / 2.1 /,
  84          AGO_Sulphur  / 1.68 /,
  85          Desulphurisation_CGO_cost,
  86          Isomerisation_cost  / 6 /,
  87          Reformer95_cost  / 2.7 /,
  88          Reformer100_cost  / 3.2 /,
  89          Cracker_Mogas_cost  / 3.2 /,
  90          Cracker_AGO_cost  / 3 /,
  91          Barrel_lower_bound  / 100 /,
  92          Barrel_upper_bound  / 1500 /,
  93          Sulphur_spec  / 0.0015 /
  94  ;
  95   
  96  Desulphurisation_CGO_cost = ((Mogas_Sulphur*109.0909 + 365.4546)/1000)*(0.85/0.159)/CGO_density;
  97   
  98  TABLE Reformer_fraction(Re_in,Re_out)
  99                  1     2     3     4     5     6
 100          1       0.08  0.09  0.83  0     0.019 2.7
 101          2       0.09  0.12  0     0.79  0.026 3.2
 102  ;
 103   
 104  TABLE Cracker_fraction(Cr_in,Cr_out)
 105                  1     2     3     4     5     6
 106          1       0.015 0.053 0.436 0.446 0.007 3.2
 107          2       0.012 0.046 0.381 0.511 0.007 3.0
 108  ;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 109   
 110  TABLE Desulphurisation_fraction(c,Des_out)
 111                  1     2     3     4
 112          1       0.98  0.02  0.02  0
 113          2       0.98  0.02  0.02  0
 114          3       0.98  0.02  0.02  0
 115          4       0.98  0.02  0.02  0
 116          5       0.98  0.02  0.02  0
 117          6       0.97  0.03  0.02  0
 118          7       0.97  0.03  0.02  0
 119          8       0.96  0.04  0.02  0
 120          9       0.98  0.02  0.02  0
 121          10      0.96  0.04  0.02  0
 122  ;
 123   
 124  TABLE JPF_fraction(JPF_in,JPF_out)
 125                  1     2
 126          1       0.05  0.035
 127          2       0.10  0.065
 128          3       0.85  0.900
 129  ;
 130   
 131  TABLE Crude_yield(c,w)
 132                  1      2      3      4      5      6      7      8
 133          1       0.0020 0.0091 0.0698 0.1598 0.1003 0.2876 0.2682 0.1032
 134          2       0.0020 0.0089 0.0480 0.0959 0.0796 0.2249 0.2735 0.2672
 135          3       0.0020 0.0080 0.0610 0.1206 0.0861 0.2414 0.2646 0.2163
 136          4       0.0040 0.0200 0.0851 0.1532 0.0947 0.2539 0.2535 0.1356
 137          5       0.0020 0.0115 0.0543 0.1026 0.0765 0.2286 0.2695 0.2550
 138          6       0.0010 0.0064 0.0246 0.0607 0.0518 0.1900 0.2932 0.3723
 139          7       0.0020 0.0155 0.0945 0.1661 0.1160 0.2656 0.2317 0.1086
 140          8       0.0029 0.0130 0.0652 0.1196 0.0838 0.2127 0.2408 0.2620
 141          9       0.0040 0.0157 0.0749 0.1267 0.0915 0.2353 0.2510 0.2009
 142          10      0.0040 0.0107 0.0604 0.1123 0.0784 0.2092 0.2491 0.2759
 143  ;
 144   
 145  TABLE LG_parameters(LG_prop,LG_in)
 146                  1     2     3     4     5
 147          1       4.30  4.28  4.36  4.21  4.22
 148          2       93.0  92.5  93.6  92.7  93.9
 149          3       90.0  89.6  90.9  89.0  90.2
 150  ;
 151   
 152  *-------------------------------------------------
 153  *               DEFINE PARAMETERS
 154  *-------------------------------------------------
 155   
 156  PARAMETERS
 157   
 158          Isomerisation_fraction(Iso_out)
 159          /       1       0.03
 160                  2       0.97
 161                  3       0.04
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 162                  4       6.0/,
 163   
 164          Desulphurisation_fraction2(Des_out)
 165          /       1       0.96
 166                  2       0.04
 167                  3       0.02
 168                  4       20.0/,
 169   
 170          Crude_density(c)
 171          /       1       0.8441
 172                  2       0.8910
 173                  3       0.8441
 174                  4       0.8369
 175                  5       0.8829
 176                  6       0.9315
 177                  7       0.8252
 178                  8       0.8745
 179                  9       0.8570
 180                  10      0.8817/,
 181   
 182          BarrelToKT(c),
 183   
 184          Sulphur_GO_nominal(c)
 185          /       1       0.157
 186                  2       0.293
 187                  3       0.162
 188                  4       0.200
 189                  5       0.263
 190                  6       0.694
 191                  7       0.767
 192                  8       1.550
 193                  9       0.326
 194                  10      1.090/,
 195   
 196          Sulphur_GO_stdev(c),
 197   
 198          VaccuumResidue_nominal(c),
 199   
 200          VaccuumResidue_stdev(c),
 201   
 202          Crude_price(c)
 203          /       1       115.0
 204                  2       107.5
 205                  3       109.7
 206                  4       110.7
 207                  5       108.4
 208                  6       101.6
 209                  7       114.3
 210                  8       101.3
 211                  9       109.4
 212                  10      104.09/,
 213   
 214          Demand_quantity(p)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 215          /       1       5
 216                  2       0
 217                  3       0
 218                  4       100
 219                  5       100
 220                  6       0
 221                  7       0/,
 222   
 223          Density_PG98_input(PG98_in)
 224          /       1       0.58
 225                  2       0.665
 226                  3       0.65
 227                  4       0.77
 228                  5       0.80
 229                  6       0.75/,
 230   
 231          Density_products(p)
 232          /       1       0.79
 233                  2       0.76
 234                  3       0.75
 235                  4       0.87
 236                  5       0.98
 237                  6       0.54
 238                  7       0.65/,
 239   
 240          Product_VP(p)
 241          /       1       0.65
 242                  2       0.65
 243                  3       0
 244                  4       0
 245                  5       0
 246                  6       0
 247                  7       0/,
 248   
 249          Product_RON(p)
 250          /       1       105
 251                  2       100
 252                  3       0
 253                  4       0
 254                  5       0
 255                  6       0
 256                  7       0/,
 257   
 258          Product_MON(p)
 259          /       1       100
 260                  2       96
 261                  3       0
 262                  4       0
 263                  5       0
 264                  6       0
 265                  7       0/,
 266   
 267          Product_Sulphur(p)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 268          /       1       0
 269                  2       0
 270                  3       0.001
 271                  4       0
 272                  5       0
 273                  6       0
 274                  7       0/,
 275   
 276          Import_upper(p)
 277          /       1       0
 278                  2       0
 279                  3       0
 280                  4       0
 281                  5       0
 282                  6       0
 283                  7       0/,
 284   
 285          RON(PG98_in)
 286          /       1       0
 287                  2       91
 288                  3       71
 289                  4       95
 290                  5       100
 291                  6       93/,
 292   
 293          MON(PG98_in)
 294          /       1       0
 295                  2       86
 296                  3       68
 297                  4       86
 298                  5       91
 299                  6       82/,
 300   
 301          VP(PG98_in)
 302          /       1       0
 303                  2       0.4
 304                  3       0.8
 305                  4       0.5
 306                  5       0.5
 307                  6       0.65/,
 308   
 309          HFO_density(c)
 310          /       1       0.9385
 311                  2       0.9682
 312                  3       0.9423
 313                  4       0.9433
 314                  5       0.9652
 315                  6       0.9727
 316                  7       0.9470
 317                  8       0.9799
 318                  9       0.9562
 319                  10      0.9685/,
 320   
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 321          GO_density(c)
 322          /       1       0.8506
 323                  2       0.8590
 324                  3       0.8413
 325                  4       0.8450
 326                  5       0.8573
 327                  6       0.8688
 328                  7       0.8404
 329                  8       0.8467
 330                  9       0.8477
 331                  10      0.8558/,
 332   
 333          Viscosity_HF1(c)
 334          /       1       32.5
 335                  2       69.6
 336                  3       38.2
 337                  4       42.7
 338                  5       86.5
 339                  6       75.5
 340                  7       42.3
 341                  8       45.0
 342                  9       53.5
 343                  10      55.2/,
 344   
 345          Viscosity_HF3(c)
 346          /       1       2.52
 347                  2       2.92
 348                  3       2.61
 349                  4       2.56
 350                  5       2.65
 351                  6       2.95
 352                  7       2.50
 353                  8       2.51
 354                  9       2.62
 355                  10      2.67/,
 356   
 357          Viscosity_products(p)
 358          /       4       31.5/,
 359   
 360          Sulphur_3(AGO_in)
 361          /       1       0.1/,
 362   
 363          Crude_lower_bound(c),
 364   
 365          Crude_upper_bound(c),
 366   
 367          Sulphur_2(c,h),
 368   
 369          Sulphur_GO_data(c,h),
 370   
 371          VaccuumResidue_data(c,h),
 372   
 373          Crude_yield_data(c,w,h),
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 374   
 375          Desulphurisation_cost(c,h),
 376   
 377          prob(h) "probability of each scenario"
 378  ;
 379   
 380  loop(c,
 381          BarrelToKT(c) = (GranularityOfBarrels/6.29)*(Crude_density(c)/1000);
 382          Sulphur_GO_stdev(c) = 0.1*Sulphur_GO_nominal(c);
 383          VaccuumResidue_nominal(c) = sum(w$(ord(w)=card(w)), Crude_yield(c,w));
 384          VaccuumResidue_stdev(c) = 0.1*VaccuumResidue_nominal(c);
 385  );
 386   
 387   
 388   
 389  *=========== Generate scenarios for the uncertain parameters =============
 390   
INCLUDE    /home/canl1/PlasmoAlgorithms/examples/refinery_model/continous/refinery1_data/5.gms
 392   
 393  PARAMETER
 394          prob(h)
 395          /
 396                  1       0.200000000000000
 397                  2       0.200000000000000
 398                  3       0.200000000000000
 399                  4       0.200000000000000
 400                  5       0.200000000000000
 401          /;
 402   
 403  PARAMETER       Sulphur_GO_data(c,h);
 404  PARAMETER       VaccuumResidue_data(c,h);
 405   
 406  Sulphur_GO_data('1','1') = 0.142088513077039;
 407  Sulphur_GO_data('2','1') = 0.310719599235616;
 408  Sulphur_GO_data('3','1') = 0.166528078567320;
 409  Sulphur_GO_data('4','1') = 0.212905808207417;
 410  Sulphur_GO_data('5','1') = 0.266482491043895;
 411  Sulphur_GO_data('6','1') = 0.761729783608670;
 412  Sulphur_GO_data('7','1') = 0.634362056891616;
 413  Sulphur_GO_data('8','1') = 1.576735109424405;
 414  Sulphur_GO_data('9','1') = 0.291490315101932;
 415  Sulphur_GO_data('10','1') = 1.089348038245218;
 416   
 417  Sulphur_GO_data('1','2') = 0.141118541282429;
 418  Sulphur_GO_data('2','2') = 0.281477552818021;
 419  Sulphur_GO_data('3','2') = 0.167414406429630;
 420  Sulphur_GO_data('4','2') = 0.184276995676455;
 421  Sulphur_GO_data('5','2') = 0.263494796995319;
 422  Sulphur_GO_data('6','2') = 0.692304963412679;
 423  Sulphur_GO_data('7','2') = 0.773320932383037;
 424  Sulphur_GO_data('8','2') = 1.309305562100601;
 425  Sulphur_GO_data('9','2') = 0.306919506227801;
 426  Sulphur_GO_data('10','2') = 1.151557551730689;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                      09/20/18 15:02:14 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 427   
 428  Sulphur_GO_data('1','3') = 0.187121509799093;
 429  Sulphur_GO_data('2','3') = 0.306887871469947;
 430  Sulphur_GO_data('3','3') = 0.147750555914438;
 431  Sulphur_GO_data('4','3') = 0.216077618904068;
 432  Sulphur_GO_data('5','3') = 0.253660826161628;
 433  Sulphur_GO_data('6','3') = 0.685002013445849;
 434  Sulphur_GO_data('7','3') = 0.687156971268290;
 435  Sulphur_GO_data('8','3') = 1.538931836234552;
 436  Sulphur_GO_data('9','3') = 0.324073104940641;
 437  Sulphur_GO_data('10','3') = 1.100321154941514;
 438   
 439  Sulphur_GO_data('1','4') = 0.138170604978298;
 440  Sulphur_GO_data('2','4') = 0.324808881357782;
 441  Sulphur_GO_data('3','4') = 0.132956277603478;
 442  Sulphur_GO_data('4','4') = 0.194502792675285;
 443  Sulphur_GO_data('5','4') = 0.228934729989087;
 444  Sulphur_GO_data('6','4') = 0.745981922602771;
 445  Sulphur_GO_data('7','4') = 0.930200382982935;
 446  Sulphur_GO_data('8','4') = 1.766616103121546;
 447  Sulphur_GO_data('9','4') = 0.333366587927294;
 448  Sulphur_GO_data('10','4') = 1.155344266991180;
 449   
 450  Sulphur_GO_data('1','5') = 0.160119037177764;
 451  Sulphur_GO_data('2','5') = 0.237070843250389;
 452  Sulphur_GO_data('3','5') = 0.179241534916566;
 453  Sulphur_GO_data('4','5') = 0.198547381282052;
 454  Sulphur_GO_data('5','5') = 0.274516556420276;
 455  Sulphur_GO_data('6','5') = 0.631873427540527;
 456  Sulphur_GO_data('7','5') = 0.806307527204965;
 457  Sulphur_GO_data('8','5') = 1.625188062179657;
 458  Sulphur_GO_data('9','5') = 0.369783597954369;
 459  Sulphur_GO_data('10','5') = 1.144253677136521;
 460   
 461   
 462  VaccuumResidue_data('1','1') = 0.098476746897009;
 463  VaccuumResidue_data('2','1') = 0.254841406932241;
 464  VaccuumResidue_data('3','1') = 0.173170328760428;
 465  VaccuumResidue_data('4','1') = 0.141239119577067;
 466  VaccuumResidue_data('5','1') = 0.255427719783213;
 467  VaccuumResidue_data('6','1') = 0.441044400649980;
 468  VaccuumResidue_data('7','1') = 0.112523799680884;
 469  VaccuumResidue_data('8','1') = 0.276969737693296;
 470  VaccuumResidue_data('9','1') = 0.189320400668474;
 471  VaccuumResidue_data('10','1') = 0.226116053589760;
 472   
 473  VaccuumResidue_data('1','2') = 0.117914428890899;
 474  VaccuumResidue_data('2','2') = 0.275227182331483;
 475  VaccuumResidue_data('3','2') = 0.236554126564275;
 476  VaccuumResidue_data('4','2') = 0.124496284282309;
 477  VaccuumResidue_data('5','2') = 0.253628478519632;
 478  VaccuumResidue_data('6','2') = 0.414977511926427;
 479  VaccuumResidue_data('7','2') = 0.096313256035774;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 480  VaccuumResidue_data('8','2') = 0.289686439323075;
 481  VaccuumResidue_data('9','2') = 0.205015116160727;
 482  VaccuumResidue_data('10','2') = 0.264009751721092;
 483   
 484  VaccuumResidue_data('1','3') = 0.094777581750325;
 485  VaccuumResidue_data('2','3') = 0.295376717751326;
 486  VaccuumResidue_data('3','3') = 0.177664240429431;
 487  VaccuumResidue_data('4','3') = 0.131236523229636;
 488  VaccuumResidue_data('5','3') = 0.228221555314528;
 489  VaccuumResidue_data('6','3') = 0.349226110581922;
 490  VaccuumResidue_data('7','3') = 0.103454097062942;
 491  VaccuumResidue_data('8','3') = 0.205819359076627;
 492  VaccuumResidue_data('9','3') = 0.177501118103415;
 493  VaccuumResidue_data('10','3') = 0.280661872199777;
 494   
 495  VaccuumResidue_data('1','4') = 0.092419309390921;
 496  VaccuumResidue_data('2','4') = 0.272437946676044;
 497  VaccuumResidue_data('3','4') = 0.221951668712980;
 498  VaccuumResidue_data('4','4') = 0.111483940457563;
 499  VaccuumResidue_data('5','4') = 0.242592773579144;
 500  VaccuumResidue_data('6','4') = 0.341326361986696;
 501  VaccuumResidue_data('7','4') = 0.124169710255900;
 502  VaccuumResidue_data('8','4') = 0.287409969852358;
 503  VaccuumResidue_data('9','4') = 0.206129072970268;
 504  VaccuumResidue_data('10','4') = 0.245554637551950;
 505   
 506  VaccuumResidue_data('1','5') = 0.118213633855153;
 507  VaccuumResidue_data('2','5') = 0.299551972362780;
 508  VaccuumResidue_data('3','5') = 0.220937083136309;
 509  VaccuumResidue_data('4','5') = 0.144708783532668;
 510  VaccuumResidue_data('5','5') = 0.237201293280314;
 511  VaccuumResidue_data('6','5') = 0.376551360490621;
 512  VaccuumResidue_data('7','5') = 0.104329719484758;
 513  VaccuumResidue_data('8','5') = 0.256205294490090;
 514  VaccuumResidue_data('9','5') = 0.193152661395673;
 515  VaccuumResidue_data('10','5') = 0.273551035003146;
 516   
 517   
 518   
 519  *======================================================================
 520   
 521   
 522   
 523  loop(h,
 524          loop(c,
 525                  loop(w$(ord(w) < card(w)),
 526                          Crude_yield_data(c,w,h) = sum(w2$(ord(w2)=card(w2)), Crude_yield(c,w)/(1-Crude_yield(c,w2))*(1-VaccuumResidue_data(c,h)));
 527                  );
 528                  Crude_yield_data(c,w2,h)$(ord(w2)=card(w2)) = VaccuumResidue_data(c,h);
 529          );
 530  );
 531   
 532  loop(c,
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 533          loop(h,
 534                  Desulphurisation_cost(c,h) = ((Sulphur_GO_data(c,h)*109.0909 + 365.4546)/1000)*(0.85/0.159)/GO_density(c);
 535                  Sulphur_2(c,h) = Sulphur_GO_data(c,h)*0.005;
 536          );
 537  );
 538   
 539  loop(c,
 540          Crude_lower_bound(c) = (Barrel_lower_bound/GranularityOfBarrels)*BarrelToKT(c);
 541          Crude_upper_bound(c) = (Barrel_upper_bound/GranularityOfBarrels)*BarrelToKT(c);
 542  );
 543   
 544   
 545   
 546   
 547   
 548  *---------------------------------------------------------------
 549  *-------------    FULL SPACE PROBLEM DEFINITION   --------------
 550  *---------------------------------------------------------------
 551   
 552  BINARY VARIABLES
 553          pickCrude(c)
 554  ;
 555   
 556  POSITIVE VARIABLES
 557          crudeQuantity(c)
 558          flow_Reformer95(h)
 559          flow_Reformer100(h)
 560          flow_Cracker_Mogas(h)
 561          flow_Cracker_AGO(h)
 562          flow_Isomerisation(h)
 563          flow_Desulphurisation_CGO(h)
 564          flow_LG_producing(h)
 565          flow_LN_producing(h)
 566          flow_HF_2(h)
 567          volume_PG98(h)
 568          volume_ES95(h)
 569          volume_HF(h)
 570   
 571          blin_CDU_LG(LG_out,h)
 572          blin_Reformer95_LG(LG_out,h)
 573          blin_Reformer100_LG(LG_out,h)
 574          blin_Mogas_LG(LG_out,h)
 575          blin_AGO_LG(LG_out,h)
 576          blin_Cracker_Mogas(Cr_CGO,h)
 577          blin_Cracker_AGO(Cr_CGO,h)
 578   
 579          flow_Desulphurisation_1(c,h)
 580          flow_AGO_1(c,h)
 581          flow_AGO_2(c,h)
 582          flow_HF_1(c,h)
 583          flow_HF_3(c,h)
 584          flow_Burn(Burn,h)
 585          flow_PG98(PG98_in,h)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 586          flow_ES95(PG98_in,h)
 587          flow_AGO_3(AGO_in,h)
 588          flow_JPF(JPF_out,h)
 589          flow_Import(p,h)
 590          fraction_LG(LG_in,h)
 591          fraction_CGO(Cr_mode,h)
 592  ;
 593   
 594  VARIABLES
 595          objvar
 596  ;
 597   
 598  EQUATIONS
 599          Mass_balance1(h)
 600          Mass_balance2(h)
 601          Mass_balance3(h)
 602          Mass_balance4(h)
 603          Mass_balance5(h)
 604          Mass_balance7(h)
 605          GO_balance(c,h)
 606          VR_balance(c,h)
 607          Desulphurisation_balance(c,h)
 608          Demand_constraint1(h)
 609          Demand_constraint2(h)
 610          Demand_constraint3(h)
 611          Demand_constraint4(h)
 612          Demand_constraint5(h)
 613          Demand_constraint6(h)
 614          Demand_constraint7(h)
 615   
 616          CDU_capacity_bound
 617          Crude_bound(c)
 618          Crude_selection(c)
 619          Desulphurisation_capacity_bound(h)
 620          Cracker_capacity_bound(h)
 621          Reformer_capacity_bound(h)
 622          Reformer95_balance(h)
 623          Reformer100_Balance(h)
 624          Isomerisation_balance(h)
 625          CN_balance(h)
 626          CGO_balance(h)
 627          Desulphurisation_CGO_balance(h)
 628          PG98_volume_def(h)
 629          ES95_volume_def(h)
 630          Butane95_constraint(h)
 631          Butane98_constraint(h)
 632          LG_split_balance(h)
 633          LG_balance(h)
 634          Reformer95_LG_balance(h)
 635          Reformer100_LG_balance(h)
 636          Cracker_Mogas_LG_balance(h)
 637          Cracker_AGO_LG_balance(h)
 638          pq_ES95_constraint(h)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 13
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 639          pq_PG98_constraint(h)
 640          pq_demand_constraint(h)
 641          pq_burn_constraint(h)
 642          VP_ES95_upper(h)
 643          VP_ES95_lower(h)
 644          VP_PG98_upper(h)
 645          VP_PG98_lower(h)
 646          RON_PG98(h)
 647          RON_ES95(h)
 648          Sensitivity_PG98(h)
 649          Sensitivity_ES95(h)
 650   
 651          blincon_CDU_LG1(h)
 652          blincon_CDU_LG2(h)
 653          blincon_CDU_LG3(h)
 654          blincon_CDU_LG4(h)
 655   
 656          blincon_Reformer95_LG1(h)
 657          blincon_Reformer95_LG2(h)
 658          blincon_Reformer95_LG3(h)
 659          blincon_Reformer95_LG4(h)
 660   
 661          blincon_Reformer100_LG1(h)
 662          blincon_Reformer100_LG2(h)
 663          blincon_Reformer100_LG3(h)
 664          blincon_Reformer100_LG4(h)
 665   
 666          blincon_Mogas_LG1(h)
 667          blincon_Mogas_LG2(h)
 668          blincon_Mogas_LG3(h)
 669          blincon_Mogas_LG4(h)
 670   
 671          blincon_AGO_LG1(h)
 672          blincon_AGO_LG2(h)
 673          blincon_AGO_LG3(h)
 674          blincon_AGO_LG4(h)
 675   
 676          blincon_Cracker_Mogas1(h)
 677          blincon_Cracker_Mogas2(h)
 678          blincon_Cracker_Mogas3(h)
 679   
 680          blincon_Cracker_AGO1(h)
 681          blincon_Cracker_AGO2(h)
 682          blincon_Cracker_AGO3(h)
 683   
 684          pq_AGO_constraint(h)
 685          pq_HF_constraint(h)
 686          pq_Desulphurisation_constraint(h)
 687          CGO_split_balance(h)
 688          Cracker_Mogas_CGO_balance(h)
 689          Cracker_AGO_CGO_balance(h)
 690          HF_volume_def(h)
 691          AGO_sulphur_balance(h)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 14
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 692          HF_viscosity_upper(h)
 693          HF_viscosity_lower(h)
 694          Refinery_Fuel(h)
 695   
 696          objfn
 697  ;
 698   
 699  *-------------------------------------
 700  *               EQUATION DEFINITIONS
 701  *-------------------------------------
 702   
 703          CDU_capacity_bound ..   sum(c, crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels) =l= CDU_capacity
 704  ;
 705   
 706          Crude_selection(c) .. crudeQuantity(c) =g= pickCrude(c)*Barrel_lower_bound
 707  ;
 708   
 709          Crude_bound(c) ..       CrudeQuantity(c) =l= pickCrude(c)*Barrel_upper_bound
 710  ;
 711   
 712          Desulphurisation_capacity_bound(h) .. flow_Desulphurisation_CGO(h) + sum(c, flow_Desulphurisation_1(c,h)) =l= Desulphurisation_capacity
 713  ;
 714   
 715          Mass_balance1(h) .. Reformer_fraction('1','1')*flow_Reformer95(h) +
 716                                                  Reformer_fraction('2','1')*flow_Reformer100(h) +
 717                                                  Cracker_fraction('1','1')*flow_Cracker_Mogas(h) +
 718                                                  Cracker_fraction('2','1')*flow_Cracker_AGO(h) +
 719                                                  Isomerisation_fraction('1')*flow_Isomerisation(h) +
 720                                                  Desulphurisation_fraction2('2')*flow_Desulphurisation_CGO(h) -
 721                                                  flow_Burn('1',h) +
 722                                                  sum(c,
 723                                                          Crude_yield_data(c,'1',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels +
 724                                                          Desulphurisation_fraction(c,'2')*flow_Desulphurisation_1(c,h)
 725                                                  ) =e= 0
 726  ;
 727   
 728          Mass_balance2(h) .. Reformer_fraction('1','2')*flow_Reformer95(h) +
 729                                                  Reformer_fraction('2','2')*flow_Reformer100(h) +
 730                                                  Cracker_fraction('1','2')*flow_Cracker_Mogas(h) +
 731                                                  Cracker_fraction('2','2')*flow_Cracker_AGO(h) -
 732                                                  flow_LG_producing(h) - flow_PG98('1',h) -
 733                                                  flow_ES95('1',h) - flow_Burn('2',h) +
 734                                                  sum(c,
 735                                                          Crude_yield_data(c,'2',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
 736                                                  ) =e= 0
 737  ;
 738   
 739          Mass_balance3(h) .. -flow_LN_producing(h) - flow_Burn('3',h) -
 740                                                  flow_PG98('3',h) - flow_ES95('3',h) -
 741                                                  flow_Isomerisation(h) - flow_JPF('1',h)*JPF_fraction('1','1') -
 742                                                  flow_JPF('2',h)*JPF_fraction('1','2') +
 743                                                  sum(c,
 744                                                          Crude_yield_data(c,'3',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 15
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 745                                                  ) =e= 0
 746  ;
 747   
 748          Mass_balance4(h) .. -flow_JPF('1',h)*JPF_fraction('2','1') -
 749                                                  flow_JPF('2',h)*JPF_fraction('2','2') -
 750                                                  flow_Reformer95(h) - flow_Reformer100(h) +
 751                                                  sum(c,
 752                                                          Crude_yield_data(c,'4',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
 753                                                  ) =e= 0
 754  ;
 755   
 756          Mass_balance5(h) .. -flow_JPF('1',h)*JPF_fraction('3','1') -
 757                                                  flow_JPF('2',h)*JPF_fraction('3','2') -
 758                                                  flow_AGO_3('1',h) +
 759                                                  sum(c,
 760                                                          Crude_yield_data(c,'5',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
 761                                                  ) =e= 0
 762  ;
 763   
 764          Mass_balance7(h) .. -flow_Cracker_Mogas(h) - flow_Cracker_AGO(h) +
 765                                                  sum(c,
 766                                                          Crude_yield_data(c,'7',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
 767                                                  ) =e= 0
 768  ;
 769   
 770          GO_balance(c,h) .. -flow_AGO_1(c,h) - flow_Desulphurisation_1(c,h) - flow_HF_3(c,h) +
 771                                                  Crude_yield_data(c,'6',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels =e= 0
 772  ;
 773   
 774          VR_balance(c,h) ..      Crude_yield_data(c,'8',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels =e= flow_HF_1(c,h)
 775  ;
 776   
 777          Desulphurisation_balance(c,h) .. Desulphurisation_fraction(c,'1')*flow_Desulphurisation_1(c,h) =e= flow_AGO_2(c,h)
 778  ;
 779   
 780          Reformer95_balance(h) ..        flow_Reformer95(h)*Reformer_fraction('1','3') +
 781                                                                  flow_Reformer100(h)*Reformer_fraction('2','3') =e=
 782                                                                  flow_PG98('4',h) + flow_ES95('4',h)
 783  ;
 784   
 785          Reformer100_balance(h) ..       flow_Reformer95(h)*Reformer_fraction('1','4') +
 786                                                                  flow_Reformer100(h)*Reformer_fraction('2','4') =e=
 787                                                                  flow_PG98('5',h) + flow_ES95('5',h)
 788  ;
 789   
 790          Isomerisation_balance(h) .. flow_Isomerisation(h)*Isomerisation_fraction('2') =e=
 791                                                                  flow_PG98('2',h) + flow_ES95('2',h)
 792  ;
 793   
 794          CN_balance(h) ..        flow_Cracker_Mogas(h)*Cracker_fraction('1','3') +
 795                                                  flow_Cracker_AGO(h)*Cracker_fraction('2','3') =e=
 796                                                  flow_PG98('6',h) + flow_ES95('6',h)
 797  ;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 16
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 798   
 799          CGO_balance(h) ..       flow_Cracker_Mogas(h)*Cracker_fraction('1','4') +
 800                                                  flow_Cracker_AGO(h)*Cracker_fraction('2','4') =e=
 801                                                  flow_Desulphurisation_CGO(h) + flow_HF_2(h) + flow_AGO_3('2',h)
 802  ;
 803   
 804          Desulphurisation_CGO_balance(h) .. Desulphurisation_fraction2('1')*flow_Desulphurisation_CGO(h) =e= flow_AGO_3('3',h)
 805  ;
 806   
 807          Demand_constraint1(h) .. flow_Import('1',h) + sum(PG98_in, flow_PG98(PG98_in,h)) =g= Demand_quantity('1')
 808  ;
 809   
 810          Demand_constraint2(h) .. flow_Import('2',h) + sum(PG98_in, flow_ES95(PG98_in,h)) =g= Demand_quantity('2')
 811  ;
 812   
 813          Demand_constraint3(h) .. flow_Import('3',h) + sum(JPF_out, flow_JPF(JPF_out,h)) =g= Demand_quantity('3')
 814  ;
 815   
 816          Demand_constraint4(h) .. flow_Import('4',h) + sum(AGO_in, flow_AGO_3(AGO_in,h)) +
 817                                                                  sum(c, flow_AGO_1(c,h) + flow_AGO_2(c,h)) =g= Demand_quantity('4')
 818  ;
 819   
 820          Demand_constraint5(h) .. flow_Import('5',h) + flow_HF_2(h) +
 821                                                                  sum(c, flow_HF_1(c,h) + flow_HF_3(c,h)) =g= Demand_quantity('5')
 822  ;
 823   
 824          Demand_constraint6(h) .. flow_Import('6',h) + flow_LG_producing(h) =g= Demand_quantity('6')
 825  ;
 826   
 827          Demand_constraint7(h) .. flow_Import('7',h) + flow_LN_producing(h) =g= Demand_quantity('7')
 828  ;
 829   
 830          PG98_volume_def(h) ..   flow_Import('1',h)/Density_products('1') +
 831                                                          sum(PG98_in, flow_PG98(PG98_in,h)/Density_PG98_input(PG98_in)) =e= volume_PG98(h)
 832  ;
 833   
 834          ES95_volume_def(h) ..   flow_Import('2',h)/Density_products('2') +
 835                                                          sum(PG98_in, flow_ES95(PG98_in,h)/Density_PG98_input(PG98_in)) =e= volume_ES95(h)
 836  ;
 837   
 838          Butane95_constraint(h) ..       flow_ES95('1',h)/Density_PG98_input('1') +
 839                                                                  0.03*flow_Import('2',h)/Density_products('2') =l= 0.05*volume_ES95(h)
 840  ;
 841   
 842          Butane98_constraint(h) ..       flow_PG98('1',h)/Density_PG98_input('1') +
 843                                                                  0.03*flow_Import('1',h)/Density_products('2') =l= 0.05*volume_PG98(h)
 844  ;
 845   
 846          blincon_CDU_LG1(h) .. blin_CDU_LG('1',h) =e= fraction_LG('1',h)*flow_ES95('1',h)
 847  ;
 848   
 849          blincon_CDU_LG2(h) .. blin_CDU_LG('2',h) =e= fraction_LG('1',h)*flow_PG98('1',h)
 850  ;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 17
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 851   
 852          blincon_CDU_LG3(h) .. blin_CDU_LG('3',h) =e= fraction_LG('1',h)*flow_Burn('2',h)
 853  ;
 854   
 855          blincon_CDU_LG4(h) .. blin_CDU_LG('4',h) =e= fraction_LG('1',h)*flow_LG_producing(h)
 856  ;
 857   
 858          blincon_Reformer95_LG1(h) .. blin_Reformer95_LG('1',h) =e= fraction_LG('2',h)*flow_ES95('1',h)
 859  ;
 860   
 861          blincon_Reformer95_LG2(h) .. blin_Reformer95_LG('2',h) =e= fraction_LG('2',h)*flow_PG98('1',h)
 862  ;
 863   
 864          blincon_Reformer95_LG3(h) .. blin_Reformer95_LG('3',h) =e= fraction_LG('2',h)*flow_Burn('2',h)
 865  ;
 866   
 867          blincon_Reformer95_LG4(h) .. blin_Reformer95_LG('4',h) =e= fraction_LG('2',h)*flow_LG_producing(h)
 868  ;
 869   
 870          blincon_Reformer100_LG1(h) .. blin_Reformer100_LG('1',h) =e= fraction_LG('3',h)*flow_ES95('1',h)
 871  ;
 872   
 873          blincon_Reformer100_LG2(h) .. blin_Reformer100_LG('2',h) =e= fraction_LG('3',h)*flow_PG98('1',h)
 874  ;
 875   
 876          blincon_Reformer100_LG3(h) .. blin_Reformer100_LG('3',h) =e= fraction_LG('3',h)*flow_Burn('2',h)
 877  ;
 878   
 879          blincon_Reformer100_LG4(h) .. blin_Reformer100_LG('4',h) =e= fraction_LG('3',h)*flow_LG_producing(h)
 880  ;
 881   
 882          blincon_Mogas_LG1(h) .. blin_Mogas_LG('1',h) =e= fraction_LG('4',h)*flow_ES95('1',h)
 883  ;
 884   
 885          blincon_Mogas_LG2(h) .. blin_Mogas_LG('2',h) =e= fraction_LG('4',h)*flow_PG98('1',h)
 886  ;
 887   
 888          blincon_Mogas_LG3(h) .. blin_Mogas_LG('3',h) =e= fraction_LG('4',h)*flow_Burn('2',h)
 889  ;
 890   
 891          blincon_Mogas_LG4(h) .. blin_Mogas_LG('4',h) =e= fraction_LG('4',h)*flow_LG_producing(h)
 892  ;
 893   
 894          blincon_AGO_LG1(h) .. blin_AGO_LG('1',h) =e= fraction_LG('5',h)*flow_ES95('1',h)
 895  ;
 896   
 897          blincon_AGO_LG2(h) .. blin_AGO_LG('2',h) =e= fraction_LG('5',h)*flow_PG98('1',h)
 898  ;
 899   
 900          blincon_AGO_LG3(h) .. blin_AGO_LG('3',h) =e= fraction_LG('5',h)*flow_Burn('2',h)
 901  ;
 902   
 903          blincon_AGO_LG4(h) .. blin_AGO_LG('4',h) =e= fraction_LG('5',h)*flow_LG_producing(h)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 18
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 904  ;
 905   
 906          LG_balance(h) ..        sum(LG_out, blin_CDU_LG(LG_out,h)) =e=
 907                                                  sum(c,
 908                                                          Crude_yield_data(c,'2',h)*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels
 909                                                  )
 910  ;
 911   
 912          Reformer95_LG_balance(h) .. flow_Reformer95(h)*Reformer_fraction('1','2') =e=
 913                                                                  sum(LG_out, blin_Reformer95_LG(LG_out,h))
 914  ;
 915   
 916          Reformer100_LG_balance(h) ..    flow_Reformer100(h)*Reformer_fraction('2','2') =e=
 917                                                                          sum(LG_out, blin_Reformer100_LG(LG_out,h))
 918  ;
 919   
 920          Cracker_Mogas_LG_balance(h) ..  flow_Cracker_Mogas(h)*Cracker_fraction('1','2') =e=
 921                                                                          sum(LG_out, blin_Mogas_LG(LG_out,h))
 922  ;
 923   
 924          Cracker_AGO_LG_balance(h) ..    flow_Cracker_AGO(h)*Cracker_fraction('2','2') =e=
 925                                                                          sum(LG_out, blin_AGO_LG(LG_out,h))
 926  ;
 927   
 928          pq_ES95_constraint(h) ..        blin_CDU_LG('1',h) + blin_Reformer95_LG('1',h) +
 929                                                                  blin_Reformer100_LG('1',h) + blin_Mogas_LG('1',h) +
 930                                                                  blin_AGO_LG('1',h) =e= flow_ES95('1',h)
 931  ;
 932   
 933          pq_PG98_constraint(h) ..        blin_CDU_LG('2',h) + blin_Reformer95_LG('2',h) +
 934                                                                  blin_Reformer100_LG('2',h) + blin_Mogas_LG('2',h) +
 935                                                                  blin_AGO_LG('2',h) =e= flow_PG98('1',h)
 936  ;
 937   
 938          pq_burn_constraint(h) ..        blin_CDU_LG('3',h) + blin_Reformer95_LG('3',h) +
 939                                                                  blin_Reformer100_LG('3',h) + blin_Mogas_LG('3',h) +
 940                                                                  blin_AGO_LG('3',h) =e= flow_Burn('2',h)
 941  ;
 942   
 943          pq_demand_constraint(h) ..      blin_CDU_LG('4',h) + blin_Reformer95_LG('4',h) +
 944                                                                  blin_Reformer100_LG('4',h) + blin_Mogas_LG('4',h) +
 945                                                                  blin_AGO_LG('4',h) =e= flow_LG_producing(h)
 946  ;
 947   
 948          LG_split_balance(h) .. sum(LG_in, fraction_LG(LG_in,h)) =e= 1
 949  ;
 950   
 951          VP_ES95_lower(h) .. -0.45*volume_ES95(h) + flow_Import('2',h)*Product_VP('2')/Density_products('2') +
 952                                                  sum(PG98_in, VP(PG98_in)*flow_ES95(PG98_in,h)/Density_PG98_input(PG98_in)) +
 953                                                  LG_parameters('1','1')*blin_CDU_LG('1',h)/Density_PG98_input('1') +
 954                                                  LG_parameters('1','2')*blin_Reformer95_LG('1',h)/Density_PG98_input('1') +
 955                                                  LG_parameters('1','3')*blin_Reformer100_LG('1',h)/Density_PG98_input('1') +
 956                                                  LG_parameters('1','4')*blin_Mogas_LG('1',h)/Density_PG98_input('1') +
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 19
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 957                                                  LG_parameters('1','5')*blin_AGO_LG('1',h)/Density_PG98_input('1') =g= 0
 958  ;
 959   
 960          VP_ES95_upper(h) .. -0.80*volume_ES95(h) + flow_Import('2',h)*Product_VP('2')/Density_products('2') +
 961                                                  sum(PG98_in, VP(PG98_in)*flow_ES95(PG98_in,h)/Density_PG98_input(PG98_in)) +
 962                                                  LG_parameters('1','1')*blin_CDU_LG('1',h)/Density_PG98_input('1') +
 963                                                  LG_parameters('1','2')*blin_Reformer95_LG('1',h)/Density_PG98_input('1') +
 964                                                  LG_parameters('1','3')*blin_Reformer100_LG('1',h)/Density_PG98_input('1') +
 965                                                  LG_parameters('1','4')*blin_Mogas_LG('1',h)/Density_PG98_input('1') +
 966                                                  LG_parameters('1','5')*blin_AGO_LG('1',h)/Density_PG98_input('1') =l= 0
 967  ;
 968   
 969          VP_PG98_lower(h) .. -0.50*volume_PG98(h) + flow_Import('1',h)*Product_VP('1')/Density_products('1') +
 970                                                  sum(PG98_in, VP(PG98_in)*flow_PG98(PG98_in,h)/Density_PG98_input(PG98_in)) +
 971                                                  LG_parameters('1','1')*blin_CDU_LG('2',h)/Density_PG98_input('1') +
 972                                                  LG_parameters('1','2')*blin_Reformer95_LG('2',h)/Density_PG98_input('1') +
 973                                                  LG_parameters('1','3')*blin_Reformer100_LG('2',h)/Density_PG98_input('1') +
 974                                                  LG_parameters('1','4')*blin_Mogas_LG('2',h)/Density_PG98_input('1') +
 975                                                  LG_parameters('1','5')*blin_AGO_LG('2',h)/Density_PG98_input('1') =g= 0
 976  ;
 977   
 978          VP_PG98_upper(h) .. -0.86*volume_PG98(h) + flow_Import('1',h)*Product_VP('1')/Density_products('1') +
 979                                                  sum(PG98_in, VP(PG98_in)*flow_PG98(PG98_in,h)/Density_PG98_input(PG98_in)) +
 980                                                  LG_parameters('1','1')*blin_CDU_LG('2',h)/Density_PG98_input('1') +
 981                                                  LG_parameters('1','2')*blin_Reformer95_LG('2',h)/Density_PG98_input('1') +
 982                                                  LG_parameters('1','3')*blin_Reformer100_LG('2',h)/Density_PG98_input('1') +
 983                                                  LG_parameters('1','4')*blin_Mogas_LG('2',h)/Density_PG98_input('1') +
 984                                                  LG_parameters('1','5')*blin_AGO_LG('2',h)/Density_PG98_input('1') =l= 0
 985  ;
 986   
 987          RON_PG98(h) ..  -98*volume_PG98(h) + flow_Import('1',h)*Product_RON('1')/Density_products('1') +
 988                                          sum(PG98_in, RON(PG98_in)*flow_PG98(PG98_in,h)/Density_PG98_input(PG98_in)) +
 989                                          LG_parameters('2','1')*blin_CDU_LG('2',h)/Density_PG98_input('1') +
 990                                          LG_parameters('2','2')*blin_Reformer95_LG('2',h)/Density_PG98_input('1') +
 991                                          LG_parameters('2','3')*blin_Reformer100_LG('2',h)/Density_PG98_input('1') +
 992                                          LG_parameters('2','4')*blin_Mogas_LG('2',h)/Density_PG98_input('1') +
 993                                          LG_parameters('2','5')*blin_AGO_LG('2',h)/Density_PG98_input('1') =g= 0
 994  ;
 995   
 996          RON_ES95(h) ..  -95*volume_ES95(h) + flow_Import('2',h)*Product_RON('2')/Density_products('2') +
 997                                          sum(PG98_in, RON(PG98_in)*flow_ES95(PG98_in,h)/Density_PG98_input(PG98_in)) +
 998                                          LG_parameters('2','1')*blin_CDU_LG('1',h)/Density_PG98_input('1') +
 999                                          LG_parameters('2','2')*blin_Reformer95_LG('1',h)/Density_PG98_input('1') +
1000                                          LG_parameters('2','3')*blin_Reformer100_LG('1',h)/Density_PG98_input('1') +
1001                                          LG_parameters('2','4')*blin_Mogas_LG('1',h)/Density_PG98_input('1') +
1002                                          LG_parameters('2','5')*blin_AGO_LG('1',h)/Density_PG98_input('1') =g= 0
1003  ;
1004   
1005          Sensitivity_PG98(h) ..  -10*volume_PG98(h) + flow_Import('1',h)*(Product_RON('1') - Product_MON('1'))/Density_products('1') +
1006                                                          sum(PG98_in, (RON(PG98_in) - MON(PG98_in))*flow_PG98(PG98_in,h)/Density_PG98_input(PG98_in)) +
1007                                                          (LG_parameters('2','1') - LG_parameters('3','1'))*blin_CDU_LG('2',h)/Density_PG98_input('1') +
1008                                                          (LG_parameters('2','2') - LG_parameters('3','2'))*blin_Reformer95_LG('2',h)/Density_PG98_input('1') +
1009                                                          (LG_parameters('2','3') - LG_parameters('3','3'))*blin_Reformer100_LG('2',h)/Density_PG98_input('1') +
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 20
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


1010                                                          (LG_parameters('2','4') - LG_parameters('3','4'))*blin_Mogas_LG('2',h)/Density_PG98_input('1') +
1011                                                          (LG_parameters('2','5') - LG_parameters('3','5'))*blin_AGO_LG('2',h)/Density_PG98_input('1') =l= 0
1012  ;
1013   
1014          Sensitivity_ES95(h) ..  -10*volume_ES95(h) + flow_Import('2',h)*(Product_RON('2') - Product_MON('2'))/Density_products('2') +
1015                                                          sum(PG98_in, (RON(PG98_in) - MON(PG98_in))*flow_ES95(PG98_in,h)/Density_PG98_input(PG98_in)) +
1016                                                          (LG_parameters('2','1') - LG_parameters('3','1'))*blin_CDU_LG('1',h)/Density_PG98_input('1') +
1017                                                          (LG_parameters('2','2') - LG_parameters('3','2'))*blin_Reformer95_LG('1',h)/Density_PG98_input('1') +
1018                                                          (LG_parameters('2','3') - LG_parameters('3','3'))*blin_Reformer100_LG('1',h)/Density_PG98_input('1') +
1019                                                          (LG_parameters('2','4') - LG_parameters('3','4'))*blin_Mogas_LG('1',h)/Density_PG98_input('1') +
1020                                                          (LG_parameters('2','5') - LG_parameters('3','5'))*blin_AGO_LG('1',h)/Density_PG98_input('1') =l= 0
1021  ;
1022   
1023          blincon_Cracker_Mogas1(h) .. blin_Cracker_Mogas('1',h) =e= fraction_CGO('1',h)*flow_AGO_3('2',h)
1024  ;
1025   
1026          blincon_Cracker_Mogas2(h) .. blin_Cracker_Mogas('2',h) =e= fraction_CGO('1',h)*flow_HF_2(h)
1027  ;
1028   
1029          blincon_Cracker_Mogas3(h) .. blin_Cracker_Mogas('3',h) =e= fraction_CGO('1',h)*flow_Desulphurisation_CGO(h)
1030  ;
1031   
1032          blincon_Cracker_AGO1(h) .. blin_Cracker_AGO('1',h) =e= fraction_CGO('2',h)*flow_AGO_3('2',h)
1033  ;
1034   
1035          blincon_Cracker_AGO2(h) .. blin_Cracker_AGO('2',h) =e= fraction_CGO('2',h)*flow_HF_2(h)
1036  ;
1037   
1038          blincon_Cracker_AGO3(h) .. blin_Cracker_AGO('3',h) =e= fraction_CGO('2',h)*flow_Desulphurisation_CGO(h)
1039  ;
1040   
1041          Cracker_Mogas_CGO_balance(h) .. blin_Cracker_Mogas('1',h) + blin_Cracker_Mogas('2',h) +
1042                                                                          blin_Cracker_Mogas('3',h) =e= flow_Cracker_Mogas(h)*Cracker_fraction('1','4')
1043  ;
1044   
1045          Cracker_AGO_CGO_balance(h) ..   blin_Cracker_AGO('1',h) + blin_Cracker_AGO('2',h) +
1046                                                                          blin_Cracker_AGO('3',h) =e= flow_Cracker_AGO(h)*Cracker_fraction('2','4')
1047  ;
1048   
1049          CGO_split_balance(h) .. sum(Cr_mode, fraction_CGO(Cr_mode,h)) =e= 1
1050  ;
1051   
1052          pq_AGO_constraint(h) .. blin_Cracker_Mogas('1',h) + blin_Cracker_AGO('1',h) =e= flow_AGO_3('2',h)
1053  ;
1054   
1055          pq_HF_constraint(h) .. blin_Cracker_Mogas('2',h) + blin_Cracker_AGO('2',h) =e= flow_HF_2(h)
1056  ;
1057   
1058          pq_Desulphurisation_constraint(h) .. blin_Cracker_Mogas('3',h) + blin_Cracker_AGO('3',h) =e= flow_Desulphurisation_CGO(h)
1059  ;
1060   
1061          HF_volume_def(h) .. -volume_HF(h) + flow_Import('5',h)/Density_products('5') +
1062                                                  flow_HF_2(h)/CGO_density +
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 21
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


1063                                                  sum(c, flow_HF_1(c,h)/HFO_density(c) + flow_HF_3(c,h)/GO_density(c)) =e= 0
1064  ;
1065   
1066          HF_viscosity_lower(h) ..        flow_Import('5',h)*Viscosity_products('5')/Density_products('5') +
1067                                                                  sum(c,
1068                                                                          flow_HF_1(c,h)*Viscosity_HF1(c)/HFO_density(c) +
1069                                                                          flow_HF_3(c,h)*Viscosity_HF3(c)/GO_density(c)
1070                                                                  ) +
1071                                                                  (blin_Cracker_Mogas('2',h)*Mogas_viscosity + blin_Cracker_AGO('2',h)*AGO_viscosity)/CGO_density -
1072                                                                  30*volume_HF(h) =g= 0
1073  ;
1074   
1075          HF_viscosity_upper(h) ..        flow_Import('5',h)*Viscosity_products('5')/Density_products('5') +
1076                                                                  sum(c,
1077                                                                          flow_HF_1(c,h)*Viscosity_HF1(c)/HFO_density(c) +
1078                                                                          flow_HF_3(c,h)*Viscosity_HF3(c)/GO_density(c)
1079                                                                  ) +
1080                                                                  (blin_Cracker_Mogas('2',h)*Mogas_viscosity + blin_Cracker_AGO('2',h)*AGO_viscosity)/CGO_density -
1081                                                                  33*volume_HF(h) =l= 0
1082  ;
1083   
1084          AGO_sulphur_balance(h) ..       flow_Import('4',h)*Product_sulphur('4') - Sulphur_spec*flow_Import('4',h) +
1085                                                                  sum(c,
1086                                                                          (Sulphur_GO_data(c,h) - Sulphur_spec)*flow_AGO_1(c,h) +
1087                                                                          (Sulphur_2(c,h) - Sulphur_spec)*flow_AGO_2(c,h)
1088                                                                  ) +
1089                                                                  flow_AGO_3('1',h)*(Sulphur_3('1') - Sulphur_spec) +
1090                                                                  blin_Cracker_AGO('1',h)*(AGO_sulphur - Sulphur_spec) +
1091                                                                  blin_Cracker_Mogas('1',h)*(Mogas_sulphur - Sulphur_spec) +
1092                                                                  blin_Cracker_AGO('3',h)*AGO_sulphur*0.005 +
1093                                                                  blin_Cracker_Mogas('3',h)*Mogas_sulphur*0.005 -
1094                                                                  Sulphur_spec*flow_AGO_3('3',h) =l= 0
1095  ;
1096   
1097          Refinery_Fuel(h) .. 1.3*flow_Burn('1',h) + 1.2*flow_Burn('2',h) + 1.1*flow_Burn('3',h) -
1098                                                  flow_Reformer95(h)*Reformer_fraction('1','5') -
1099                                                  flow_Reformer100(h)*Reformer_fraction('2','5') -
1100                                                  flow_Cracker_Mogas(h)*Cracker_fraction('1','5') -
1101                                                  flow_Cracker_AGO(h)*Cracker_fraction('2','5') -
1102                                                  flow_Isomerisation(h)*Isomerisation_fraction('3') -
1103                                                  flow_Desulphurisation_CGO(h)*Desulphurisation_fraction2('3') - 15.2 -
1104                                                  sum(c,
1105                                                          0.018*crudeQuantity(c)*BarrelToKT(c)/GranularityOfBarrels +
1106                                                          flow_Desulphurisation_1(c,h)*Desulphurisation_fraction(c,'3')
1107                                                  ) =g= 0
1108  ;
1109   
1110          Cracker_capacity_bound(h) .. flow_Cracker_Mogas(h) + flow_Cracker_AGO(h) =l= Cracker_capacity
1111  ;
1112   
1113          Reformer_capacity_bound(h) .. flow_Reformer95(h) + flow_Reformer100(h) =l= Reformer_capacity
1114  ;
1115   
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 22
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


1116   
1117      objfn .. objvar =e= sum(h,prob(h)*(
1118                                                                  Cracker_Mogas_cost*flow_Cracker_Mogas(h) +
1119                                                                  Cracker_AGO_cost*flow_Cracker_AGO(h) +
1120                                                                  Reformer95_cost*flow_Reformer95(h) +
1121                                                                  Reformer100_cost*flow_Reformer100(h) +
1122                                                                  Isomerisation_cost*flow_Isomerisation(h) +
1123                                                                  Desulphurisation_CGO_cost*flow_Desulphurisation_CGO(h) -
1124                                                                  LG_sale*flow_LG_producing(h) -
1125                                                                  LN_sale*flow_LN_producing(h) -
1126                                                                  HF_sale*flow_HF_2(h) +
1127                                                                  sum(c,
1128                                                                          Desulphurisation_cost(c,h)*flow_Desulphurisation_1(c,h) -
1129                                                                          AGO_sale*flow_AGO_1(c,h) -
1130                                                                          AGO_sale*flow_AGO_2(c,h) -
1131                                                                          HF_sale*flow_HF_1(c,h) -
1132                                                                          HF_sale*flow_HF_3(c,h) +
1133                                                                          (crudeQuantity(c)/1000)*(Crude_price(c)+1)
1134                                                                  ) -
1135                                                                  sum(PG98_in,
1136                                                                          PG98_sale*flow_PG98(PG98_in,h) +
1137                                                                          ES95_sale*flow_ES95(PG98_in,h)
1138                                                                  ) -
1139                                                                  sum(JPF_out,
1140                                                                          JET_sale*flow_JPF(JPF_out,h)
1141                                                                  ) -
1142                                                                  sum(AGO_in,
1143                                                                          AGO_sale*flow_AGO_3(AGO_in,h)
1144                                                                  )
1145                                                          ) );
1146   
1147   
1148  MODEL refinery1 /all/;
1149   
1150   
1151  *---------------------------------------------
1152  *                       SET VARIABLE BOUNDS
1153  *---------------------------------------------
1154   
1155  flow_Desulphurisation_1.up(c,h) = Desulphurisation_capacity;
1156  flow_AGO_1.up(c,h) = Crude_upper_bound(c);
1157  flow_AGO_2.up(c,h) = Desulphurisation_capacity;
1158  flow_HF_1.up(c,h) = Crude_upper_bound(c);
1159  flow_HF_3.up(c,h) = Crude_upper_bound(c);
1160  flow_PG98.up(PG98_in,h) = CDU_capacity;
1161  flow_ES95.up(PG98_in,h) = CDU_capacity;
1162  flow_Burn.up(Burn,h) = CDU_capacity;
1163  flow_AGO_3.up(AGO_in,h) = Cracker_capacity;
1164  flow_AGO_3.up('1',h) = CDU_capacity;
1165  flow_JPF.up(JPF_out,h) = CDU_capacity;
1166  flow_Import.up(p,h) = Import_upper(p);
1167  fraction_LG.up(LG_in,h) = 1;
1168  flow_Reformer95.lo(h) = Reformer95_lower;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 23
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


1169  flow_Reformer95.up(h) = Reformer_capacity;
1170  flow_Reformer100.up(h) = Reformer_capacity - Reformer95_lower;
1171  flow_Cracker_Mogas.up(h) = Cracker_capacity;
1172  flow_Cracker_AGO.up(h) = Cracker_capacity;
1173  flow_Isomerisation.up(h) = CDU_capacity;
1174  flow_Desulphurisation_CGO.up(h) = Cracker_capacity;
1175  flow_LG_producing.up(h) = CDU_capacity;
1176  flow_LN_producing.up(h) = CDU_capacity;
1177  flow_HF_2.up(h) = Cracker_capacity;
1178  volume_PG98.up(h) = CDU_capacity/Density_PG98_input('1');
1179  volume_ES95.up(h) = CDU_capacity/Density_PG98_input('1');
1180  fraction_CGO.up(Cr_mode,h) = 1;
1181  volume_HF.up(h) = CDU_capacity/GO_density('7');
1182  blin_CDU_LG.up(LG_out,h) = CDU_capacity;
1183  blin_Reformer95_LG.up(LG_out,h) = CDU_capacity;
1184  blin_Reformer100_LG.up(LG_out,h) = CDU_capacity;
1185  blin_Mogas_LG.up(LG_out,h) = CDU_capacity;
1186  blin_AGO_LG.up(LG_out,h) = CDU_capacity;
1187  blin_Cracker_Mogas.up(Cr_CGO,h) = Cracker_capacity;
1188  blin_Cracker_AGO.up(Cr_CGO,h) = Cracker_Capacity;
1189   
1190   
1191   
1192  *------------------------------------------
1193  *                       SOLVE THE PROBLEM
1194  *------------------------------------------
1195   
1196  solve refinery1 minimizing objvar using MINLP;
1197   
1198   
1199  *---------------------------------------------------
1200  *                       PRINT FINAL SOLUTION STATISTICS
1201  *---------------------------------------------------
1202   
1203  SCALARS solver_time, wall_time;
1204   
1205  solver_time = refinery1.resusd;
1206  wall_time = refinery1.etsolve;
1207   
1208  display solver_time, wall_time;
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 24
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /home/canl1/PlasmoAlgorithms/examples/refinery_model/continous/refinery1_continuous.gms
     2      391 INCLUDE        1     391  ./home/canl1/PlasmoAlgorithms/examples/refinery_model/continous/refinery1_data/5.gms


COMPILATION TIME     =        0.010 SECONDS      3 MB  25.1.1 r66732 LEX-LEG
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 25
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Analysis      SOLVE refinery1 Using MINLP From line 1196


**** Matrix error - lower bound > upper bound
flow_Reformer95(1)   (.LO, .L, .UP = 5, 0, 0.065)

**** Matrix error - lower bound > upper bound
flow_Reformer95(2)   (.LO, .L, .UP = 5, 0, 0.065)

**** Matrix error - lower bound > upper bound
flow_Reformer95(3)   (.LO, .L, .UP = 5, 0, 0.065)

**** Matrix error - lower bound > upper bound
flow_Reformer95(4)   (.LO, .L, .UP = 5, 0, 0.065)

**** Matrix error - lower bound > upper bound
flow_Reformer95(5)   (.LO, .L, .UP = 5, 0, 0.065)

**** Matrix error - lower bound > upper bound
flow_Reformer100(1)   (.LO, .L, .UP = 0, 0, -4.935)

**** Matrix error - lower bound > upper bound
flow_Reformer100(2)   (.LO, .L, .UP = 0, 0, -4.935)

**** Matrix error - lower bound > upper bound
flow_Reformer100(3)   (.LO, .L, .UP = 0, 0, -4.935)

**** Matrix error - lower bound > upper bound
flow_Reformer100(4)   (.LO, .L, .UP = 0, 0, -4.935)

**** Matrix error - lower bound > upper bound
flow_Reformer100(5)   (.LO, .L, .UP = 0, 0, -4.935)
GAMS 25.1.1  r66732 Released May 19, 2018 LEX-LEG x86 64bit/Linux                                                                                                                                                                     09/20/18 15:02:14 Page 26
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE refinery1 Using MINLP From line 1196


MODEL STATISTICS

BLOCKS OF EQUATIONS          88     SINGLE EQUATIONS          577
BLOCKS OF VARIABLES          35     SINGLE VARIABLES          631  10 projected
NON ZERO ELEMENTS         3,871     NON LINEAR N-Z            260
DERIVATIVE POOL              20     CONSTANT POOL              16
CODE LENGTH                 650     DISCRETE VARIABLES         10


GENERATION TIME      =        0.009 SECONDS      4 MB  25.1.1 r66732 LEX-LEG

**** SOLVE from line 1196 ABORTED, EXECERROR = 10


EXECUTION TIME       =        0.010 SECONDS      4 MB  25.1.1 r66732 LEX-LEG


USER: Eval License Carnegie Mellon University        G180112/0001AS-GEN
      Dept. of Chemical Engineering                              DC9476
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/canl1/PlasmoAlgorithms/examples/refinery_model/continous/refinery1_continuous.gms
Output     /home/canl1/PlasmoAlgorithms/examples/refinery_model/continous/refinery1_continuous.lst

**** USER ERROR(S) ENCOUNTERED
